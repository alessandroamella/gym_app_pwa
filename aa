// App.css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


// App.tsx
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { CssBaseline } from '@mui/material';
import { AuthScreen } from './screens/AuthScreen';
import { FeedScreen } from './screens/FeedScreen';
import { AddWorkoutScreen } from './screens/AddWorkoutScreen';
import { ProtectedRoute } from './ProtectedRoute';
import { useAuthStore } from './store/authStore';
import { useEffect } from 'react';
import axios from 'axios';
import { WorkoutScreen } from './screens/WorkoutScreen';
import { EditProfileScreen } from './screens/EditProfileScreen';
import Layout from './components/Layout';

const theme = createTheme({
  // Add your theme customizations here if needed
});

const App = () => {
  const { setUser, logout, token } = useAuthStore();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        if (token) {
          const response = await axios.get('/v1/auth/profile', {
            headers: { Authorization: `Bearer ${token}` },
          });
          setUser(response.data);
        }
      } catch (error) {
        console.error('Authentication check failed:', error);
        logout(); // Clear user data if auth check fails
      }
    };

    checkAuth();
  }, [setUser, logout, token]);

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline /> {/* Normalize CSS */}
      <Router>
        <Routes>
          <Route path="/auth" element={<AuthScreen />} />
          <Route
            path="/"
            element={
              <ProtectedRoute>
                <Layout>
                  <FeedScreen />
                </Layout>
              </ProtectedRoute>
            }
          />
          <Route
            path="/add-workout"
            element={
              <ProtectedRoute>
                <Layout>
                  <AddWorkoutScreen />
                </Layout>
              </ProtectedRoute>
            }
          />
          <Route
            path="/workout/:id"
            element={
              <ProtectedRoute>
                <Layout>
                  <WorkoutScreen />
                </Layout>
              </ProtectedRoute>
            }
          />
          <Route
            path="/edit-profile"
            element={
              <ProtectedRoute>
                <Layout>
                  <EditProfileScreen />
                </Layout>
              </ProtectedRoute>
            }
          />
        </Routes>
      </Router>
    </ThemeProvider>
  );
};

export default App;


// PWABadge.css
.PWABadge-container {
    padding: 0;
    margin: 0;
    width: 0;
    height: 0;
}
.PWABadge-toast {
    position: fixed;
    right: 0;
    bottom: 0;
    margin: 16px;
    padding: 12px;
    border: 1px solid #8885;
    border-radius: 4px;
    z-index: 1;
    text-align: left;
    box-shadow: 3px 4px 5px 0 #8885;
    background-color: white;
}
.PWABadge-toast-message {
    margin-bottom: 8px;
}
.PWABadge-toast-button {
    border: 1px solid #8885;
    outline: none;
    margin-right: 5px;
    border-radius: 2px;
    padding: 3px 10px;
}


// PWABadge.tsx
import './PWABadge.css'

import { useRegisterSW } from 'virtual:pwa-register/react'

function PWABadge() {
  // check for updates every hour
  const period = 60 * 60 * 1000

  const {
    
    needRefresh: [needRefresh, setNeedRefresh],
    updateServiceWorker,
  } = useRegisterSW({
    onRegisteredSW(swUrl, r) {
      if (period <= 0) return
      if (r?.active?.state === 'activated') {
        registerPeriodicSync(period, swUrl, r)
      }
      else if (r?.installing) {
        r.installing.addEventListener('statechange', (e) => {
          const sw = e.target as ServiceWorker
          if (sw.state === 'activated')
            registerPeriodicSync(period, swUrl, r)
        })
      }
    },
  })

  function close() {
    
    setNeedRefresh(false)
  }

  return (
    <div className="PWABadge" role="alert" aria-labelledby="toast-message">
      { (needRefresh)
      && (
        <div className="PWABadge-toast">
          <div className="PWABadge-message">
            <span id="toast-message">New content available, click on reload button to update.</span>
              
              
          </div>
          <div className="PWABadge-buttons">
            <button className="PWABadge-toast-button" onClick={() => updateServiceWorker(true)}>Reload</button>
            <button className="PWABadge-toast-button" onClick={() => close()}>Close</button>
          </div>
        </div>
      )}
    </div>
  )
}

export default PWABadge

/**
 * This function will register a periodic sync check every hour, you can modify the interval as needed.
 */
function registerPeriodicSync(period: number, swUrl: string, r: ServiceWorkerRegistration) {
  if (period <= 0) return

  setInterval(async () => {
    if ('onLine' in navigator && !navigator.onLine)
      return

    const resp = await fetch(swUrl, {
      cache: 'no-store',
      headers: {
        'cache': 'no-store',
        'cache-control': 'no-cache',
      },
    })

    if (resp?.status === 200)
      await r.update()
  }, period)
}


// ProtectedRoute.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuthStore } from './store/authStore';

export const ProtectedRoute: React.FC<React.PropsWithChildren> = ({
  children,
}) => {
  const auth = useAuthStore();
  const location = useLocation();

  if (!auth.user) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};


// index.css
@tailwind base;
@tailwind components;
@tailwind utilities;


// main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


// vite-env.d.ts
/// <reference types="vite/client" />
/// <reference types="vite-plugin-pwa/react" />


// store/authStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import Cookies from 'js-cookie';

interface AuthState {
  token: string | null;
  user: { id: number; username: string; profilePicUrl: string | null } | null;
  setToken: (token: string | null) => void;
  setUser: (user: {
    id: number;
    username: string;
    profilePicUrl: string | null;
  }) => void;
  logout: () => void;
}

// Custom storage object for cookies
const cookieStorage = {
  getItem: (name: string): string | null => {
    const value = Cookies.get(name);
    return value ? JSON.parse(value) : null;
  },
  setItem: (name: string, value: string): void => {
    // Set cookie with 7 days expiry - adjust as needed
    Cookies.set(name, value, { expires: 7, sameSite: 'strict' });
  },
  removeItem: (name: string): void => {
    Cookies.remove(name);
  },
};

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      token: null,
      user: null,
      setToken: (token) => set({ token }),
      setUser: (user) => set({ user }),
      logout: () => {
        set({ user: null, token: null });
      },
    }),
    {
      name: 'gym-auth', // name of the cookie
      storage: createJSONStorage(() => cookieStorage),
      // Only persist these fields
      partialize: (state) => ({
        token: state.token,
        user: state.user,
      }),
    },
  ),
);


// screens/AddWorkoutScreen.tsx
import React, { useState } from 'react';
import { Button, TextField, Box } from '@mui/material';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { BaseWorkout } from '../types';
import { useAuthStore } from '../store/authStore';

export const AddWorkoutScreen: React.FC = () => {
  const [duration, setDuration] = useState<number | undefined>();
  const [notes, setNotes] = useState('');
  const [file, setFile] = useState<File | null>(null); // For file uploads
  const navigate = useNavigate();
  const { token } = useAuthStore();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    try {
      // const formData = new FormData();
      // formData.append('durationMin', duration!.toString()); // Append duration
      // formData.append('notes', notes);

      const { data } = await axios.post<BaseWorkout>(
        '/v1/workout',
        {
          durationMin: duration,
          notes,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );

      if (file) {
        // POST to /v1/workout/:id/media
        const mediaFormData = new FormData();
        mediaFormData.append('file', file);
        await axios.post(`/v1/workout/${data.id}/media`, mediaFormData, {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'multipart/form-data',
          },
        });
      }

      // If successful, redirect to the feed
      navigate('/', { replace: true });
    } catch (error) {
      // Handle errors
      console.error('Error adding workout:', error);
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      setFile(event.target.files[0]);
    }
  };

  return (
    <Box component="form" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>
      <TextField
        margin="normal"
        required
        fullWidth
        id="duration"
        label="Duration (minutes)"
        name="duration"
        type="number"
        onChange={(e) => setDuration(parseInt(e.target.value, 10))}
      />
      <TextField
        margin="normal"
        fullWidth
        name="notes"
        label="Notes"
        id="notes"
        multiline
        rows={4}
        onChange={(e) => setNotes(e.target.value)}
      />
      <input type="file" onChange={handleFileChange} />
      <Button type="submit" fullWidth variant="contained" sx={{ mt: 3, mb: 2 }}>
        Add Workout
      </Button>
    </Box>
  );
};


// screens/AuthScreen.tsx
import { useState } from 'react';
import { TextField, Button, Box, Typography, Alert } from '@mui/material';
import axios, { AxiosError } from 'axios';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../store/authStore';

export const AuthScreen = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const location = useLocation();
  const { setUser, setToken } = useAuthStore();
  const from = location.state?.from?.pathname || '/';

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      const response = await axios.post('/v1/auth/login', {
        username,
        password,
      });

      setToken(response.data.token);
      const profileResponse = await axios.get('/v1/auth/profile', {
        headers: { Authorization: `Bearer ${response.data.token}` },
      });
      setUser(profileResponse.data);

      navigate(from, { replace: true }); // Redirect to the protected route
    } catch (err) {
      setError(
        (err as AxiosError<{ message: string }>)?.response?.data?.message ||
          'Login failed',
      );
    }
  };

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <Typography variant="h4" component="h1" gutterBottom>
        Gym App
      </Typography>
      <Box sx={{ width: '80%', maxWidth: 400, mt: 4 }}>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}
        <form onSubmit={handleSubmit}>
          {' '}
          {/* Add form element */}
          <TextField
            label="Username"
            fullWidth
            margin="normal"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <TextField
            label="Password"
            type="password"
            fullWidth
            margin="normal"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <Button type="submit" variant="contained" fullWidth sx={{ mt: 2 }}>
            Login
          </Button>
        </form>
      </Box>
    </Box>
  );
};


// screens/EditProfileScreen.tsx
// src/screens/EditProfileScreen.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  Avatar,
  Typography,
  Alert,
} from '@mui/material';
import axios from 'axios';
import { useAuthStore } from '../store/authStore';
import { useNavigate } from 'react-router-dom';

export const EditProfileScreen: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [profilePic, setProfilePic] = useState<File | null>(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false); // State for success message
  const { token, user, setUser } = useAuthStore();
  const navigate = useNavigate();

  const handleSave = async () => {
    setError('');
    setSuccess(false); // Reset success message

    try {
      // Update profile details
      if (username || password) {
        await axios.patch(
          '/v1/auth/profile',
          { username, password },
          {
            headers: { Authorization: `Bearer ${token}` },
          },
        );
      }

      // Update profile picture
      if (profilePic) {
        const formData = new FormData();
        formData.append('file', profilePic);
        await axios.patch('/v1/auth/profile-pic', formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
            Authorization: `Bearer ${token}`,
          },
        });
      }

      // if successful, redirect to the feed or show a success message
      setSuccess(true);
      // Update Zustand store after successful update.
      const profileResponse = await axios.get('/v1/auth/profile', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUser(profileResponse.data);

      setTimeout(() => {
        navigate('/', { replace: true });
      }, 1500);
    } catch (err) {
      if (axios.isAxiosError(err)) {
        setError(err?.response?.data?.message || err.message);
      } else {
        setError('An unknown error occurred.');
      }
    }
  };

  const handleProfilePicChange = (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    if (event.target.files && event.target.files.length > 0) {
      setProfilePic(event.target.files[0]);
    }
  };

  return (
    <Box sx={{ maxWidth: 400, margin: 'auto', marginTop: 4, padding: 2 }}>
      <Typography variant="h5" align="center" gutterBottom>
        Edit Profile
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}
      {success && (
        <Alert severity="success" sx={{ mb: 2 }}>
          Profile updated successfully!
        </Alert>
      )}

      {/* Current Profile Picture */}
      <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
        <Avatar
          alt={user?.username || 'User'}
          src={user?.profilePicUrl || ''}
          sx={{ width: 100, height: 100 }}
        />
      </Box>

      <input type="file" onChange={handleProfilePicChange} accept="image/*" />

      <TextField
        label="Username"
        fullWidth
        margin="normal"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <TextField
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />

      <Button variant="contained" fullWidth onClick={handleSave} sx={{ mt: 2 }}>
        Save Changes
      </Button>
    </Box>
  );
};


// screens/FeedScreen.tsx
// src/screens/FeedScreen.tsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Typography, Fab, Box } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import { useNavigate } from 'react-router-dom';
import { WorkoutCard } from '../components/WorkoutCard';
import { GetAllWorkoutsResponse } from '../types';
import { useAuthStore } from '../store/authStore';

export const FeedScreen: React.FC = () => {
  const [workouts, setWorkouts] = useState<GetAllWorkoutsResponse[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { token } = useAuthStore();

  useEffect(() => {
    const fetchWorkouts = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/v1/workout', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setWorkouts(response.data);
      } catch (err) {
        if (axios.isAxiosError(err)) {
          setError(err?.response?.data?.message || err.message);
        } else {
          setError('An unknown error occurred.');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchWorkouts();
  }, [token]);

  if (loading) {
    return <Typography variant="body1">Loading workouts...</Typography>;
  }

  if (error) {
    return (
      <Typography variant="body1" color="error">
        {error}
      </Typography>
    );
  }

  return (
    <Box sx={{ position: 'relative' }}>
      {' '}
      {/* Container for relative positioning */}
      {/* Workout List */}
      {workouts.map((workout) => (
        <WorkoutCard key={workout.id} workout={workout} />
      ))}
      {workouts.length === 0 && (
        <Typography variant="body1">No workouts found.</Typography>
      )}
      {/* Floating Add Button */}
      <Fab
        color="primary"
        aria-label="add"
        sx={{
          position: 'fixed',
          bottom: 16,
          right: 16,
        }}
        onClick={() => navigate('/add-workout')} // Navigate to add workout screen
      >
        <AddIcon />
      </Fab>
    </Box>
  );
};


// screens/WorkoutScreen.tsx
// src/screens/WorkoutScreen.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import {
  Typography,
  Box,
  Card,
  CardContent,
  CardMedia,
  Avatar,
  List,
  ListItem,
  ListItemText,
  TextField,
  Button,
  CircularProgress,
  IconButton,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import { formatDistanceToNow } from 'date-fns';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import DeleteIcon from '@mui/icons-material/Delete'; // Import Delete Icon
import { useAuthStore } from '../store/authStore';
import { GetWorkoutResponse } from '../types';

export const WorkoutScreen: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [workout, setWorkout] = useState<GetWorkoutResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [commentText, setCommentText] = useState('');
  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);
  const { token, user } = useAuthStore();

  useEffect(() => {
    const fetchWorkout = async () => {
      try {
        setLoading(true);

        if (!token) {
          throw new Error('Not logged in.');
        }

        const response = await axios.get(`/v1/workout/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setWorkout(response.data);
      } catch (err) {
        if (axios.isAxiosError(err)) {
          setError(err?.response?.data?.message || err.message);
        } else {
          setError('An unknown error occurred.');
        }
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchWorkout();
    }
  }, [id, token]);

  const handleGoBack = () => {
    navigate('/');
  };

  const handleCommentSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await axios.post(
        `/v1/comment/workout/${id}`,
        { text: commentText },
        { headers: { Authorization: `Bearer ${token}` } },
      );
      setCommentText(''); // Clear the comment input

      if (id) {
        // Refresh the workout details after posting comment:

        const response = await axios.get(`/v1/workout/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setWorkout(response.data);
      }
    } catch (error) {
      console.error('Error posting comment:', error);
    }
  };

  const handleDeleteWorkout = async () => {
    try {
      await axios.delete(`/v1/workout/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      navigate('/', { replace: true }); // Redirect to feed after successful deletion
    } catch (error) {
      console.error('Error deleting workout:', error);
      // Handle error, e.g., show an error message to the user
    } finally {
      setDeleteConfirmationOpen(false); // Close the confirmation dialog
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  if (!workout) {
    return <Typography variant="body1">Workout not found.</Typography>;
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <IconButton onClick={handleGoBack} sx={{ mr: 1 }}>
          <ArrowBackIcon />
        </IconButton>

        <Typography variant="h5">Workout Details</Typography>

        {/* Delete button only if it's the user's workout */}
        {workout.user.id === user?.id && (
          <IconButton
            onClick={() => setDeleteConfirmationOpen(true)}
            color="error"
            sx={{ ml: 'auto' }}
          >
            <DeleteIcon />
          </IconButton>
        )}
      </Box>

      <Card>
        {workout.media && workout.media.length > 0 && (
          <CardMedia
            component="img"
            height="300"
            image={workout.media[0].url}
            alt={`Workout Media for ${workout.id}`}
          />
        )}
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
            <Avatar
              alt={workout.user.username}
              src={workout.user.profilePicUrl || ''}
              sx={{ mr: 1 }}
            />
            <Typography variant="subtitle1">{workout.user.username}</Typography>
            <Typography
              variant="caption"
              color="textSecondary"
              sx={{ ml: 'auto' }}
            >
              {formatDistanceToNow(new Date(workout.createdAt), {
                addSuffix: true,
              })}
            </Typography>
          </Box>
          <Typography variant="h6" gutterBottom>
            Duration: {workout.durationMin} minutes
          </Typography>

          {workout.notes && (
            <Typography variant="body1" paragraph>
              {workout.notes}
            </Typography>
          )}

          <Box sx={{ mt: 2 }}>
            <Typography variant="h6">Comments</Typography>
            <List>
              {workout.comments.map((comment) => (
                <ListItem key={comment.id}>
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {comment.user.profilePicUrl && (
                          <Avatar
                            alt={comment.user.username}
                            src={comment.user.profilePicUrl || ''}
                            sx={{ marginRight: '0.5rem' }}
                          />
                        )}
                        <Typography
                          variant="body2"
                          fontWeight="medium"
                          component="span"
                        >
                          {' '}
                          {comment.user.username}{' '}
                        </Typography>
                        <Typography variant="body2" ml={1} component="span">
                          {comment.text}
                        </Typography>
                      </Box>
                    }
                    secondary={
                      <Typography variant="caption" color="textSecondary">
                        {formatDistanceToNow(new Date(comment.createdAt), {
                          addSuffix: true,
                        })}
                      </Typography>
                    }
                  />
                </ListItem>
              ))}
            </List>

            {/* Comment Input */}
            <Box component="form" onSubmit={handleCommentSubmit}>
              <TextField
                label="Add a comment"
                fullWidth
                value={commentText}
                onChange={(e) => setCommentText(e.target.value)}
                margin="normal"
              />
              <Button type="submit" variant="contained" disabled={!commentText}>
                Post Comment
              </Button>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteConfirmationOpen}
        onClose={() => setDeleteConfirmationOpen(false)}
      >
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          Are you sure you want to delete this workout? This action cannot be
          undone.
        </DialogContent>
        <DialogActions>
          <Button
            onClick={() => setDeleteConfirmationOpen(false)}
            color="primary"
          >
            Cancel
          </Button>
          <Button onClick={handleDeleteWorkout} color="error">
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};


// components/Layout.tsx
import React, { useState } from 'react';
import {
  AppBar,
  Toolbar,
  Typography,
  IconButton,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Container,
  Button,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  Menu as MenuIcon,
  Person as PersonIcon,
  Edit as EditIcon,
  Logout as LogoutIcon,
  Login as LoginIcon,
} from '@mui/icons-material';
import { useAuthStore } from '../store/authStore';
import { Link } from 'react-router-dom';

interface LayoutProps {
  children: React.ReactNode;
  isLoggedIn?: boolean;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const [drawerOpen, setDrawerOpen] = useState(false);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };

  const { user } = useAuthStore();

  const menuItems = user
    ? [
        {
          text: 'Profile',
          icon: <PersonIcon />,
          href: '/profile',
        },
        {
          text: 'Edit Profile',
          icon: <EditIcon />,
          href: '/edit-profile',
        },
        {
          text: 'Logout',
          icon: <LogoutIcon />,
          href: '/logout',
        },
      ]
    : [
        {
          text: 'Login',
          icon: <LoginIcon />,
          href: '/auth',
        },
      ];

  const navigationList = (
    <List>
      {menuItems.map((item) => (
        <ListItem key={item.text}>
          <Link
            to={item.href}
            style={{ textDecoration: 'none', color: 'inherit' }}
          >
            <ListItemIcon>{item.icon}</ListItemIcon>
            <ListItemText primary={item.text} />
          </Link>
        </ListItem>
      ))}
    </List>
  );

  return (
    <div
      style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}
    >
      <AppBar position="sticky">
        <Toolbar>
          {isMobile && (
            <IconButton
              color="inherit"
              edge="start"
              onClick={handleDrawerToggle}
              sx={{ mr: 2 }}
            >
              <MenuIcon />
            </IconButton>
          )}

          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            <Link to="/" style={{ textDecoration: 'none', color: 'inherit' }}>
              Gym App
            </Link>
          </Typography>

          {/* Desktop Navigation */}
          {!isMobile && (
            <div>
              {menuItems.map((item) => (
                <Link
                  key={item.text}
                  to={item.href}
                  style={{ textDecoration: 'none', color: 'inherit' }}
                >
                  <Button
                    key={item.text}
                    color="inherit"
                    startIcon={item.icon}
                    sx={{ ml: 2 }}
                  >
                    {item.text}
                  </Button>
                </Link>
              ))}
            </div>
          )}
        </Toolbar>
      </AppBar>

      {/* Mobile Drawer */}
      <Drawer
        variant="temporary"
        anchor="left"
        open={drawerOpen}
        onClose={handleDrawerToggle}
        ModalProps={{
          keepMounted: true, // Better mobile performance
        }}
      >
        {navigationList}
      </Drawer>

      {/* Main Content */}
      <Container component="main" sx={{ flex: 1, py: 3 }}>
        {children}
      </Container>
    </div>
  );
};

export default Layout;


// components/WorkoutCard.tsx
import React from 'react';
import {
  Card,
  CardActionArea,
  CardContent,
  CardMedia,
  Typography,
  List,
  ListItem,
  Avatar,
  Box,
} from '@mui/material';
import { formatDistanceToNow } from 'date-fns';
import { GetAllWorkoutsResponse, GetWorkoutResponse } from '../types';
import { Link } from 'react-router-dom';

interface WorkoutCardProps {
  workout: GetAllWorkoutsResponse;
}

export const WorkoutCard: React.FC<WorkoutCardProps> = ({ workout }) => {
  return (
    <Card sx={{ marginBottom: '1rem', maxWidth: 400 }}>
      {' '}
      {/* Add maxWidth */}
      <CardActionArea component={Link} to={`/workout/${workout.id}`}>
        {workout.media && workout.media.length > 0 && (
          <CardMedia
            component="img"
            height="200" // Adjust as needed
            image={workout.media[0].url} // Display the first image
            alt={`Workout media for ${workout.id}`}
          />
        )}
        <CardContent>
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              marginBottom: '0.5rem',
            }}
          >
            <Avatar
              alt={workout.user.username}
              src={workout.user.profilePicUrl || ''}
              sx={{ marginRight: '0.5rem' }}
            />
            <Typography variant="subtitle1">{workout.user.username}</Typography>
            <Typography
              variant="caption"
              color="textSecondary"
              sx={{ marginLeft: 'auto' }}
            >
              {formatDistanceToNow(new Date(workout.createdAt), {
                addSuffix: true,
              })}
            </Typography>
          </Box>

          <Typography variant="h6" gutterBottom>
            Duration: {workout.durationMin} minutes
          </Typography>
          {workout.notes && (
            <Typography variant="body2">{workout.notes}</Typography>
          )}

          <Typography variant="body2" sx={{ marginTop: 1 }}>
            Comments ({workout._count.comments})
          </Typography>

          <List>
            {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
            {(workout as any as GetWorkoutResponse).comments?.map((comment) => (
              <ListItem
                key={comment.id}
                sx={{
                  padding: '0', // Reduce default padding
                  display: 'flex',
                  alignItems: 'start',
                  borderBottom: '1px solid #eee', // Add a separator line
                }}
              >
                {/* Left side for avatar and username */}
                {comment.user.profilePicUrl && (
                  <Box
                    sx={{
                      mr: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'start',
                    }}
                  >
                    <Avatar
                      src={comment.user.profilePicUrl}
                      sx={{ width: 24, height: 24, mb: 0.5 }}
                    />
                  </Box>
                )}

                {/* Right side for comment text and timestamp */}
                <Box>
                  <Box sx={{ display: 'flex', alignItems: 'baseline' }}>
                    <Typography
                      variant="body2"
                      component="span"
                      fontWeight="medium"
                    >
                      {comment.user.username}
                    </Typography>
                    <Typography variant="body2" component="span" ml={1}>
                      {comment.text}
                    </Typography>
                  </Box>
                  <Typography variant="caption" color="textSecondary">
                    {formatDistanceToNow(new Date(comment.createdAt), {
                      addSuffix: true,
                    })}
                  </Typography>
                </Box>
              </ListItem>
            ))}
          </List>
        </CardContent>
      </CardActionArea>
    </Card>
  );
};


// types/index.ts
// User types
export interface WorkoutUser {
  id: number;
  username: string;
  profilePicUrl: string | null;
}

export interface CommentUser extends WorkoutUser {}

export interface WorkoutMedia {
  url: string;
  mime: string;
}

// Comment type
export interface WorkoutComment {
  id: number;
  text: string;
  createdAt: Date;
  user: CommentUser;
}

// Base workout type (assuming these fields from GetAllWorkoutsResponseDto)
export interface BaseWorkout {
  id: number;
  title: string;
  durationMin: number;
  description: string;
  createdAt: Date;
  notes?: string;
  updatedAt: Date;
  user: WorkoutUser;
  media: WorkoutMedia[];
  // Add any other fields that are in GetAllWorkoutsResponseDto
}

// Response type for getting all workouts
export interface GetAllWorkoutsResponse extends BaseWorkout {
  // Any additional fields specific to the list view
  _count: {
    comments: number;
  };
}

// Response type for getting a single workout
export interface GetWorkoutResponse extends BaseWorkout {
  comments: WorkoutComment[];
}

// If you need type guards
export const isWorkoutResponse = (
  workout: GetAllWorkoutsResponse | GetWorkoutResponse,
): workout is GetWorkoutResponse => {
  return 'comments' in workout;
};

// For API functions, you might use them like this:
export type GetAllWorkoutsFunction = () => Promise<GetAllWorkoutsResponse[]>;
export type GetWorkoutFunction = (id: number) => Promise<GetWorkoutResponse>;


